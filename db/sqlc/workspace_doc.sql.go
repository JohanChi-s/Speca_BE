// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workspace_doc.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWorkspaceToDocument = `-- name: AddWorkspaceToDocument :exec
INSERT INTO "Workspace_Document" (
  "workspace_id",
  "document_id"
) VALUES (
  $1, $2
)
`

type AddWorkspaceToDocumentParams struct {
	WorkspaceID pgtype.UUID `json:"workspace_id"`
	DocumentID  pgtype.UUID `json:"document_id"`
}

func (q *Queries) AddWorkspaceToDocument(ctx context.Context, arg AddWorkspaceToDocumentParams) error {
	_, err := q.db.Exec(ctx, addWorkspaceToDocument, arg.WorkspaceID, arg.DocumentID)
	return err
}

const getDocumentsByWorkspaceID = `-- name: GetDocumentsByWorkspaceID :many
SELECT "document_id" FROM "Workspace_Document"
WHERE "workspace_id" = $1
`

func (q *Queries) GetDocumentsByWorkspaceID(ctx context.Context, workspaceID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getDocumentsByWorkspaceID, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var document_id pgtype.UUID
		if err := rows.Scan(&document_id); err != nil {
			return nil, err
		}
		items = append(items, document_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWorkspaceFromDocument = `-- name: RemoveWorkspaceFromDocument :exec
DELETE FROM "Workspace_Document"
WHERE "workspace_id" = $1 AND "document_id" = $2
`

type RemoveWorkspaceFromDocumentParams struct {
	WorkspaceID pgtype.UUID `json:"workspace_id"`
	DocumentID  pgtype.UUID `json:"document_id"`
}

func (q *Queries) RemoveWorkspaceFromDocument(ctx context.Context, arg RemoveWorkspaceFromDocumentParams) error {
	_, err := q.db.Exec(ctx, removeWorkspaceFromDocument, arg.WorkspaceID, arg.DocumentID)
	return err
}
