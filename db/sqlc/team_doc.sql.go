// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: team_doc.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTeamToDocument = `-- name: AddTeamToDocument :exec
INSERT INTO "Team_Document" (
  "team_id",
  "document_id"
) VALUES (
  $1, $2
)
`

type AddTeamToDocumentParams struct {
	TeamID     pgtype.UUID `json:"team_id"`
	DocumentID pgtype.UUID `json:"document_id"`
}

func (q *Queries) AddTeamToDocument(ctx context.Context, arg AddTeamToDocumentParams) error {
	_, err := q.db.Exec(ctx, addTeamToDocument, arg.TeamID, arg.DocumentID)
	return err
}

const getDocumentsByTeamID = `-- name: GetDocumentsByTeamID :many
SELECT "document_id" FROM "Team_Document"
WHERE "team_id" = $1
`

func (q *Queries) GetDocumentsByTeamID(ctx context.Context, teamID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getDocumentsByTeamID, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var document_id pgtype.UUID
		if err := rows.Scan(&document_id); err != nil {
			return nil, err
		}
		items = append(items, document_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamFromDocument = `-- name: RemoveTeamFromDocument :exec
DELETE FROM "Team_Document"
WHERE "team_id" = $1 AND "document_id" = $2
`

type RemoveTeamFromDocumentParams struct {
	TeamID     pgtype.UUID `json:"team_id"`
	DocumentID pgtype.UUID `json:"document_id"`
}

func (q *Queries) RemoveTeamFromDocument(ctx context.Context, arg RemoveTeamFromDocumentParams) error {
	_, err := q.db.Exec(ctx, removeTeamFromDocument, arg.TeamID, arg.DocumentID)
	return err
}
