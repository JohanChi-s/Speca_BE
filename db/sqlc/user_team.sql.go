// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_team.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToTeam = `-- name: AddUserToTeam :exec
INSERT INTO "User_Team" (
  "user_id",
  "team_id"
) VALUES (
  $1, $2
)
`

type AddUserToTeamParams struct {
	UserID pgtype.UUID `json:"user_id"`
	TeamID pgtype.UUID `json:"team_id"`
}

func (q *Queries) AddUserToTeam(ctx context.Context, arg AddUserToTeamParams) error {
	_, err := q.db.Exec(ctx, addUserToTeam, arg.UserID, arg.TeamID)
	return err
}

const getTeamsByUserID = `-- name: GetTeamsByUserID :many
SELECT "team_id" FROM "User_Team"
WHERE "user_id" = $1
`

func (q *Queries) GetTeamsByUserID(ctx context.Context, userID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getTeamsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var team_id pgtype.UUID
		if err := rows.Scan(&team_id); err != nil {
			return nil, err
		}
		items = append(items, team_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByTeamID = `-- name: GetUsersByTeamID :many
SELECT "user_id" FROM "User_Team"
WHERE "team_id" = $1
`

func (q *Queries) GetUsersByTeamID(ctx context.Context, teamID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getUsersByTeamID, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var user_id pgtype.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllUsersFromTeam = `-- name: RemoveAllUsersFromTeam :exec
DELETE FROM "User_Team"
WHERE "team_id" = $1
`

func (q *Queries) RemoveAllUsersFromTeam(ctx context.Context, teamID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, removeAllUsersFromTeam, teamID)
	return err
}

const removeUserFromTeam = `-- name: RemoveUserFromTeam :exec
DELETE FROM "User_Team"
WHERE "user_id" = $1 AND "team_id" = $2
`

type RemoveUserFromTeamParams struct {
	UserID pgtype.UUID `json:"user_id"`
	TeamID pgtype.UUID `json:"team_id"`
}

func (q *Queries) RemoveUserFromTeam(ctx context.Context, arg RemoveUserFromTeamParams) error {
	_, err := q.db.Exec(ctx, removeUserFromTeam, arg.UserID, arg.TeamID)
	return err
}
