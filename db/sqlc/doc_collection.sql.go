// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: doc_collection.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDocumentToCollection = `-- name: AddDocumentToCollection :exec
INSERT INTO "Document_Collection" (
  "document_id",
  "collection_id"
) VALUES (
  $1, $2
)
`

type AddDocumentToCollectionParams struct {
	DocumentID   pgtype.UUID `json:"document_id"`
	CollectionID pgtype.UUID `json:"collection_id"`
}

func (q *Queries) AddDocumentToCollection(ctx context.Context, arg AddDocumentToCollectionParams) error {
	_, err := q.db.Exec(ctx, addDocumentToCollection, arg.DocumentID, arg.CollectionID)
	return err
}

const getCollectionsByDocumentID = `-- name: GetCollectionsByDocumentID :many
SELECT "collection_id" FROM "Document_Collection"
WHERE "document_id" = $1
`

func (q *Queries) GetCollectionsByDocumentID(ctx context.Context, documentID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getCollectionsByDocumentID, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var collection_id pgtype.UUID
		if err := rows.Scan(&collection_id); err != nil {
			return nil, err
		}
		items = append(items, collection_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDocumentFromCollection = `-- name: RemoveDocumentFromCollection :exec
DELETE FROM "Document_Collection"
WHERE "document_id" = $1 AND "collection_id" = $2
`

type RemoveDocumentFromCollectionParams struct {
	DocumentID   pgtype.UUID `json:"document_id"`
	CollectionID pgtype.UUID `json:"collection_id"`
}

func (q *Queries) RemoveDocumentFromCollection(ctx context.Context, arg RemoveDocumentFromCollectionParams) error {
	_, err := q.db.Exec(ctx, removeDocumentFromCollection, arg.DocumentID, arg.CollectionID)
	return err
}
