// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: team_workspace.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTeamToWorkspace = `-- name: AddTeamToWorkspace :exec
INSERT INTO "Team_Workspace" (
  "team_id",
  "workspace_id"
) VALUES (
  $1, $2
)
`

type AddTeamToWorkspaceParams struct {
	TeamID      pgtype.UUID `json:"team_id"`
	WorkspaceID pgtype.UUID `json:"workspace_id"`
}

func (q *Queries) AddTeamToWorkspace(ctx context.Context, arg AddTeamToWorkspaceParams) error {
	_, err := q.db.Exec(ctx, addTeamToWorkspace, arg.TeamID, arg.WorkspaceID)
	return err
}

const getWorkspacesByTeamID = `-- name: GetWorkspacesByTeamID :many
SELECT "workspace_id" FROM "Team_Workspace"
WHERE "team_id" = $1
`

func (q *Queries) GetWorkspacesByTeamID(ctx context.Context, teamID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getWorkspacesByTeamID, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var workspace_id pgtype.UUID
		if err := rows.Scan(&workspace_id); err != nil {
			return nil, err
		}
		items = append(items, workspace_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamFromWorkspace = `-- name: RemoveTeamFromWorkspace :exec
DELETE FROM "Team_Workspace"
WHERE "team_id" = $1 AND "workspace_id" = $2
`

type RemoveTeamFromWorkspaceParams struct {
	TeamID      pgtype.UUID `json:"team_id"`
	WorkspaceID pgtype.UUID `json:"workspace_id"`
}

func (q *Queries) RemoveTeamFromWorkspace(ctx context.Context, arg RemoveTeamFromWorkspaceParams) error {
	_, err := q.db.Exec(ctx, removeTeamFromWorkspace, arg.TeamID, arg.WorkspaceID)
	return err
}
