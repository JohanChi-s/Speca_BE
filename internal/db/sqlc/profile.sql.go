// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: profile.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO "Profile" (
  "userId",
  "fullName",
  "age",
  "address",
  "avatarUrl",
  "createdAt",
  "updatedAt"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, "userId", "fullName", age, address, "avatarUrl", "createdAt", "updatedAt"
`

type CreateProfileParams struct {
	UserId    pgtype.UUID      `json:"userId"`
	FullName  pgtype.Text      `json:"fullName"`
	Age       pgtype.Int4      `json:"age"`
	Address   pgtype.Text      `json:"address"`
	AvatarUrl pgtype.Text      `json:"avatarUrl"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.UserId,
		arg.FullName,
		arg.Age,
		arg.Address,
		arg.AvatarUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.FullName,
		&i.Age,
		&i.Address,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM "Profile"
WHERE "id" = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProfile, id)
	return err
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT id, "userId", "fullName", age, address, "avatarUrl", "createdAt", "updatedAt" FROM "Profile"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetProfileByID(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.FullName,
		&i.Age,
		&i.Address,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, "userId", "fullName", age, address, "avatarUrl", "createdAt", "updatedAt" FROM "Profile"
WHERE "userId" = $1 LIMIT 1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, userid pgtype.UUID) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByUserID, userid)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.FullName,
		&i.Age,
		&i.Address,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, "userId", "fullName", age, address, "avatarUrl", "createdAt", "updatedAt" FROM "Profile"
ORDER BY "createdAt"
LIMIT $1
OFFSET $2
`

type ListProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProfiles(ctx context.Context, arg ListProfilesParams) ([]Profile, error) {
	rows, err := q.db.Query(ctx, listProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Profile{}
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserId,
			&i.FullName,
			&i.Age,
			&i.Address,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE "Profile"
SET
  "fullName" = $2,
  "age" = $3,
  "address" = $4,
  "avatarUrl" = $5,
  "updatedAt" = $6
WHERE "id" = $1
`

type UpdateProfileParams struct {
	ID        uuid.UUID        `json:"id"`
	FullName  pgtype.Text      `json:"fullName"`
	Age       pgtype.Int4      `json:"age"`
	Address   pgtype.Text      `json:"address"`
	AvatarUrl pgtype.Text      `json:"avatarUrl"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.Exec(ctx, updateProfile,
		arg.ID,
		arg.FullName,
		arg.Age,
		arg.Address,
		arg.AvatarUrl,
		arg.UpdatedAt,
	)
	return err
}
