// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: doc_tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTagToDocument = `-- name: AddTagToDocument :exec
INSERT INTO "Document_Tag" (
  "document_id",
  "tag_id"
) VALUES (
  $1, $2
)
`

type AddTagToDocumentParams struct {
	DocumentID pgtype.Text `json:"document_id"`
	TagID      pgtype.Text `json:"tag_id"`
}

func (q *Queries) AddTagToDocument(ctx context.Context, arg AddTagToDocumentParams) error {
	_, err := q.db.Exec(ctx, addTagToDocument, arg.DocumentID, arg.TagID)
	return err
}

const getTagsByDocumentID = `-- name: GetTagsByDocumentID :many
SELECT "tag_id" FROM "Document_Tag"
WHERE "document_id" = $1
`

func (q *Queries) GetTagsByDocumentID(ctx context.Context, documentID pgtype.Text) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getTagsByDocumentID, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var tag_id pgtype.Text
		if err := rows.Scan(&tag_id); err != nil {
			return nil, err
		}
		items = append(items, tag_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromDocument = `-- name: RemoveTagFromDocument :exec
DELETE FROM "Document_Tag"
WHERE "document_id" = $1 AND "tag_id" = $2
`

type RemoveTagFromDocumentParams struct {
	DocumentID pgtype.Text `json:"document_id"`
	TagID      pgtype.Text `json:"tag_id"`
}

func (q *Queries) RemoveTagFromDocument(ctx context.Context, arg RemoveTagFromDocumentParams) error {
	_, err := q.db.Exec(ctx, removeTagFromDocument, arg.DocumentID, arg.TagID)
	return err
}
