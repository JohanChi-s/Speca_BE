// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_doc.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToDocument = `-- name: AddUserToDocument :exec
INSERT INTO "User_Document" (
  "user_id",
  "document_id"
) VALUES (
  $1, $2
)
`

type AddUserToDocumentParams struct {
	UserID     pgtype.Text `json:"user_id"`
	DocumentID pgtype.Text `json:"document_id"`
}

func (q *Queries) AddUserToDocument(ctx context.Context, arg AddUserToDocumentParams) error {
	_, err := q.db.Exec(ctx, addUserToDocument, arg.UserID, arg.DocumentID)
	return err
}

const getDocumentsByUserID = `-- name: GetDocumentsByUserID :many
SELECT "document_id" FROM "User_Document"
WHERE "user_id" = $1
`

func (q *Queries) GetDocumentsByUserID(ctx context.Context, userID pgtype.Text) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getDocumentsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var document_id pgtype.Text
		if err := rows.Scan(&document_id); err != nil {
			return nil, err
		}
		items = append(items, document_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromDocument = `-- name: RemoveUserFromDocument :exec
DELETE FROM "User_Document"
WHERE "user_id" = $1 AND "document_id" = $2
`

type RemoveUserFromDocumentParams struct {
	UserID     pgtype.Text `json:"user_id"`
	DocumentID pgtype.Text `json:"document_id"`
}

func (q *Queries) RemoveUserFromDocument(ctx context.Context, arg RemoveUserFromDocumentParams) error {
	_, err := q.db.Exec(ctx, removeUserFromDocument, arg.UserID, arg.DocumentID)
	return err
}
