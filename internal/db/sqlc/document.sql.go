// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: document.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO "Document" (
  "title",
  "text",
  "emoji",
  "isPublic",
  "isFullWidth",
  "createdAt",
  "updatedAt",
  "authorId",
  "teamId",
  "workspaceId",
  "collectionId"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, title, text, emoji, "isPublic", "isFullWidth", "createdAt", "updatedAt", "authorId", "teamId", "workspaceId", "collectionId"
`

type CreateDocumentParams struct {
	Title        pgtype.Text      `json:"title"`
	Text         pgtype.Text      `json:"text"`
	Emoji        pgtype.Text      `json:"emoji"`
	IsPublic     pgtype.Bool      `json:"isPublic"`
	IsFullWidth  pgtype.Bool      `json:"isFullWidth"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
	AuthorId     pgtype.Text      `json:"authorId"`
	TeamId       pgtype.Text      `json:"teamId"`
	WorkspaceId  pgtype.Text      `json:"workspaceId"`
	CollectionId pgtype.Text      `json:"collectionId"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument,
		arg.Title,
		arg.Text,
		arg.Emoji,
		arg.IsPublic,
		arg.IsFullWidth,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AuthorId,
		arg.TeamId,
		arg.WorkspaceId,
		arg.CollectionId,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Text,
		&i.Emoji,
		&i.IsPublic,
		&i.IsFullWidth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorId,
		&i.TeamId,
		&i.WorkspaceId,
		&i.CollectionId,
	)
	return i, err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM "Document"
WHERE "id" = $1
`

func (q *Queries) DeleteDocument(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteDocument, id)
	return err
}

const getDocumentByID = `-- name: GetDocumentByID :one
SELECT id, title, text, emoji, "isPublic", "isFullWidth", "createdAt", "updatedAt", "authorId", "teamId", "workspaceId", "collectionId" FROM "Document"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetDocumentByID(ctx context.Context, id string) (Document, error) {
	row := q.db.QueryRow(ctx, getDocumentByID, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Text,
		&i.Emoji,
		&i.IsPublic,
		&i.IsFullWidth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorId,
		&i.TeamId,
		&i.WorkspaceId,
		&i.CollectionId,
	)
	return i, err
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, title, text, emoji, "isPublic", "isFullWidth", "createdAt", "updatedAt", "authorId", "teamId", "workspaceId", "collectionId" FROM "Document"
ORDER BY "createdAt"
LIMIT $1
OFFSET $2
`

type ListDocumentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDocuments(ctx context.Context, arg ListDocumentsParams) ([]Document, error) {
	rows, err := q.db.Query(ctx, listDocuments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Text,
			&i.Emoji,
			&i.IsPublic,
			&i.IsFullWidth,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorId,
			&i.TeamId,
			&i.WorkspaceId,
			&i.CollectionId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDocument = `-- name: UpdateDocument :exec
UPDATE "Document"
SET
  "title" = $2,
  "text" = $3,
  "emoji" = $4,
  "isPublic" = $5,
  "isFullWidth" = $6,
  "updatedAt" = $7,
  "authorId" = $8,
  "teamId" = $9,
  "workspaceId" = $10,
  "collectionId" = $11
WHERE "id" = $1
`

type UpdateDocumentParams struct {
	ID           string           `json:"id"`
	Title        pgtype.Text      `json:"title"`
	Text         pgtype.Text      `json:"text"`
	Emoji        pgtype.Text      `json:"emoji"`
	IsPublic     pgtype.Bool      `json:"isPublic"`
	IsFullWidth  pgtype.Bool      `json:"isFullWidth"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
	AuthorId     pgtype.Text      `json:"authorId"`
	TeamId       pgtype.Text      `json:"teamId"`
	WorkspaceId  pgtype.Text      `json:"workspaceId"`
	CollectionId pgtype.Text      `json:"collectionId"`
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) error {
	_, err := q.db.Exec(ctx, updateDocument,
		arg.ID,
		arg.Title,
		arg.Text,
		arg.Emoji,
		arg.IsPublic,
		arg.IsFullWidth,
		arg.UpdatedAt,
		arg.AuthorId,
		arg.TeamId,
		arg.WorkspaceId,
		arg.CollectionId,
	)
	return err
}
