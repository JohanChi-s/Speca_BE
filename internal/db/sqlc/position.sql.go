// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: position.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPosition = `-- name: CreatePosition :one
INSERT INTO "Position" (
  "line",
  "col",
  "toLine",
  "toCol",
  "content",
  "createdAt",
  "updatedAt",
  "commentsId"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, line, col, "toLine", "toCol", content, "createdAt", "updatedAt", "commentsId"
`

type CreatePositionParams struct {
	Line       pgtype.Int4      `json:"line"`
	Col        pgtype.Int4      `json:"col"`
	ToLine     pgtype.Text      `json:"toLine"`
	ToCol      pgtype.Text      `json:"toCol"`
	Content    pgtype.Text      `json:"content"`
	CreatedAt  pgtype.Timestamp `json:"createdAt"`
	UpdatedAt  pgtype.Timestamp `json:"updatedAt"`
	CommentsId pgtype.Text      `json:"commentsId"`
}

func (q *Queries) CreatePosition(ctx context.Context, arg CreatePositionParams) (Position, error) {
	row := q.db.QueryRow(ctx, createPosition,
		arg.Line,
		arg.Col,
		arg.ToLine,
		arg.ToCol,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CommentsId,
	)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Line,
		&i.Col,
		&i.ToLine,
		&i.ToCol,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CommentsId,
	)
	return i, err
}

const deletePosition = `-- name: DeletePosition :exec
DELETE FROM "Position"
WHERE "id" = $1
`

func (q *Queries) DeletePosition(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePosition, id)
	return err
}

const getPositionByID = `-- name: GetPositionByID :one
SELECT id, line, col, "toLine", "toCol", content, "createdAt", "updatedAt", "commentsId" FROM "Position"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetPositionByID(ctx context.Context, id string) (Position, error) {
	row := q.db.QueryRow(ctx, getPositionByID, id)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Line,
		&i.Col,
		&i.ToLine,
		&i.ToCol,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CommentsId,
	)
	return i, err
}

const listPositions = `-- name: ListPositions :many
SELECT id, line, col, "toLine", "toCol", content, "createdAt", "updatedAt", "commentsId" FROM "Position"
ORDER BY "createdAt"
LIMIT $1
OFFSET $2
`

type ListPositionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPositions(ctx context.Context, arg ListPositionsParams) ([]Position, error) {
	rows, err := q.db.Query(ctx, listPositions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Position{}
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.Line,
			&i.Col,
			&i.ToLine,
			&i.ToCol,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CommentsId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePosition = `-- name: UpdatePosition :exec
UPDATE "Position"
SET
  "line" = $2,
  "col" = $3,
  "toLine" = $4,
  "toCol" = $5,
  "content" = $6,
  "updatedAt" = $7,
  "commentsId" = $8
WHERE "id" = $1
`

type UpdatePositionParams struct {
	ID         string           `json:"id"`
	Line       pgtype.Int4      `json:"line"`
	Col        pgtype.Int4      `json:"col"`
	ToLine     pgtype.Text      `json:"toLine"`
	ToCol      pgtype.Text      `json:"toCol"`
	Content    pgtype.Text      `json:"content"`
	UpdatedAt  pgtype.Timestamp `json:"updatedAt"`
	CommentsId pgtype.Text      `json:"commentsId"`
}

func (q *Queries) UpdatePosition(ctx context.Context, arg UpdatePositionParams) error {
	_, err := q.db.Exec(ctx, updatePosition,
		arg.ID,
		arg.Line,
		arg.Col,
		arg.ToLine,
		arg.ToCol,
		arg.Content,
		arg.UpdatedAt,
		arg.CommentsId,
	)
	return err
}
