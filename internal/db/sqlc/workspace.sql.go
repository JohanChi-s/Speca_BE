// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workspace.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO "Workspace" (
  "name",
  "domain",
  "isPublic",
  "createdAt",
  "updatedAt",
  "url"
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, name, domain, "isPublic", "createdAt", "updatedAt", url
`

type CreateWorkspaceParams struct {
	Name      pgtype.Text      `json:"name"`
	Domain    pgtype.Text      `json:"domain"`
	IsPublic  pgtype.Bool      `json:"isPublic"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
	Url       pgtype.Text      `json:"url"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace,
		arg.Name,
		arg.Domain,
		arg.IsPublic,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Url,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM "Workspace"
WHERE "id" = $1
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorkspace, id)
	return err
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, name, domain, "isPublic", "createdAt", "updatedAt", url FROM "Workspace"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetWorkspaceByID(ctx context.Context, id uuid.UUID) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspaceByID, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const listWorkspaces = `-- name: ListWorkspaces :many
SELECT id, name, domain, "isPublic", "createdAt", "updatedAt", url FROM "Workspace"
ORDER BY "createdAt"
LIMIT $1
OFFSET $2
`

type ListWorkspacesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWorkspaces(ctx context.Context, arg ListWorkspacesParams) ([]Workspace, error) {
	rows, err := q.db.Query(ctx, listWorkspaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Domain,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspace = `-- name: UpdateWorkspace :exec
UPDATE "Workspace"
SET
  "name" = $2,
  "domain" = $3,
  "isPublic" = $4,
  "updatedAt" = $5,
  "url" = $6
WHERE "id" = $1
`

type UpdateWorkspaceParams struct {
	ID        uuid.UUID        `json:"id"`
	Name      pgtype.Text      `json:"name"`
	Domain    pgtype.Text      `json:"domain"`
	IsPublic  pgtype.Bool      `json:"isPublic"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
	Url       pgtype.Text      `json:"url"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) error {
	_, err := q.db.Exec(ctx, updateWorkspace,
		arg.ID,
		arg.Name,
		arg.Domain,
		arg.IsPublic,
		arg.UpdatedAt,
		arg.Url,
	)
	return err
}
