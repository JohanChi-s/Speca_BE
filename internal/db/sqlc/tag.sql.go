// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTag = `-- name: CreateTag :one
INSERT INTO "Tag" (
  "name",
  "description"
) VALUES (
  $1, $2
) RETURNING id, name, description
`

type CreateTagParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, arg.Name, arg.Description)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM "Tag"
WHERE "id" = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTag, id)
	return err
}

const getTagByID = `-- name: GetTagByID :one
SELECT id, name, description FROM "Tag"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetTagByID(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagByID, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, description FROM "Tag"
WHERE "name" = $1 LIMIT 1
`

func (q *Queries) GetTagByName(ctx context.Context, name pgtype.Text) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT id, name, description FROM "Tag"
ORDER BY "id"
LIMIT $1
OFFSET $2
`

type ListTagsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
UPDATE "Tag"
SET
  "name" = $2,
  "description" = $3
WHERE "id" = $1
`

type UpdateTagParams struct {
	ID          string      `json:"id"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.Exec(ctx, updateTag, arg.ID, arg.Name, arg.Description)
	return err
}
