// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_workspace.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToWorkspace = `-- name: AddUserToWorkspace :exec
INSERT INTO "User_Workspace" (
  "user_id",
  "workspace_id"
) VALUES (
  $1, $2
)
`

type AddUserToWorkspaceParams struct {
	UserID      pgtype.Text `json:"user_id"`
	WorkspaceID pgtype.Text `json:"workspace_id"`
}

func (q *Queries) AddUserToWorkspace(ctx context.Context, arg AddUserToWorkspaceParams) error {
	_, err := q.db.Exec(ctx, addUserToWorkspace, arg.UserID, arg.WorkspaceID)
	return err
}

const getUsersByWorkspaceID = `-- name: GetUsersByWorkspaceID :many
SELECT "user_id" FROM "User_Workspace"
WHERE "workspace_id" = $1
`

func (q *Queries) GetUsersByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getUsersByWorkspaceID, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var user_id pgtype.Text
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspacesByUserID = `-- name: GetWorkspacesByUserID :many
SELECT "workspace_id" FROM "User_Workspace"
WHERE "user_id" = $1
`

func (q *Queries) GetWorkspacesByUserID(ctx context.Context, userID pgtype.Text) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getWorkspacesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var workspace_id pgtype.Text
		if err := rows.Scan(&workspace_id); err != nil {
			return nil, err
		}
		items = append(items, workspace_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllUsersFromWorkspace = `-- name: RemoveAllUsersFromWorkspace :exec
DELETE FROM "User_Workspace"
WHERE "workspace_id" = $1
`

func (q *Queries) RemoveAllUsersFromWorkspace(ctx context.Context, workspaceID pgtype.Text) error {
	_, err := q.db.Exec(ctx, removeAllUsersFromWorkspace, workspaceID)
	return err
}

const removeUserFromWorkspace = `-- name: RemoveUserFromWorkspace :exec
DELETE FROM "User_Workspace"
WHERE "user_id" = $1 AND "workspace_id" = $2
`

type RemoveUserFromWorkspaceParams struct {
	UserID      pgtype.Text `json:"user_id"`
	WorkspaceID pgtype.Text `json:"workspace_id"`
}

func (q *Queries) RemoveUserFromWorkspace(ctx context.Context, arg RemoveUserFromWorkspaceParams) error {
	_, err := q.db.Exec(ctx, removeUserFromWorkspace, arg.UserID, arg.WorkspaceID)
	return err
}
