// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: actionEvent.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createActionEvent = `-- name: CreateActionEvent :one
INSERT INTO "ActionEvent" (
  "action",
  "createdAt",
  "actor",
  "assignee",
  "assigner",
  "documentId",
  "collectionId"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, action, "createdAt", actor, assignee, assigner, "documentId", "collectionId"
`

type CreateActionEventParams struct {
	Action       interface{}      `json:"action"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
	Actor        pgtype.UUID      `json:"actor"`
	Assignee     pgtype.UUID      `json:"assignee"`
	Assigner     pgtype.UUID      `json:"assigner"`
	DocumentId   pgtype.UUID      `json:"documentId"`
	CollectionId pgtype.UUID      `json:"collectionId"`
}

func (q *Queries) CreateActionEvent(ctx context.Context, arg CreateActionEventParams) (ActionEvent, error) {
	row := q.db.QueryRow(ctx, createActionEvent,
		arg.Action,
		arg.CreatedAt,
		arg.Actor,
		arg.Assignee,
		arg.Assigner,
		arg.DocumentId,
		arg.CollectionId,
	)
	var i ActionEvent
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.CreatedAt,
		&i.Actor,
		&i.Assignee,
		&i.Assigner,
		&i.DocumentId,
		&i.CollectionId,
	)
	return i, err
}

const deleteActionEvent = `-- name: DeleteActionEvent :exec
DELETE FROM "ActionEvent"
WHERE "id" = $1
`

func (q *Queries) DeleteActionEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteActionEvent, id)
	return err
}

const getActionEventByID = `-- name: GetActionEventByID :one
SELECT id, action, "createdAt", actor, assignee, assigner, "documentId", "collectionId" FROM "ActionEvent"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetActionEventByID(ctx context.Context, id uuid.UUID) (ActionEvent, error) {
	row := q.db.QueryRow(ctx, getActionEventByID, id)
	var i ActionEvent
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.CreatedAt,
		&i.Actor,
		&i.Assignee,
		&i.Assigner,
		&i.DocumentId,
		&i.CollectionId,
	)
	return i, err
}

const listActionEvents = `-- name: ListActionEvents :many
SELECT id, action, "createdAt", actor, assignee, assigner, "documentId", "collectionId" FROM "ActionEvent"
ORDER BY "createdAt"
LIMIT $1
OFFSET $2
`

type ListActionEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActionEvents(ctx context.Context, arg ListActionEventsParams) ([]ActionEvent, error) {
	rows, err := q.db.Query(ctx, listActionEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActionEvent{}
	for rows.Next() {
		var i ActionEvent
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.CreatedAt,
			&i.Actor,
			&i.Assignee,
			&i.Assigner,
			&i.DocumentId,
			&i.CollectionId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActionEvent = `-- name: UpdateActionEvent :exec
UPDATE "ActionEvent"
SET
  "action" = $2,
  "createdAt" = $3,
  "actor" = $4,
  "assignee" = $5,
  "assigner" = $6,
  "documentId" = $7,
  "collectionId" = $8
WHERE "id" = $1
`

type UpdateActionEventParams struct {
	ID           uuid.UUID        `json:"id"`
	Action       interface{}      `json:"action"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
	Actor        pgtype.UUID      `json:"actor"`
	Assignee     pgtype.UUID      `json:"assignee"`
	Assigner     pgtype.UUID      `json:"assigner"`
	DocumentId   pgtype.UUID      `json:"documentId"`
	CollectionId pgtype.UUID      `json:"collectionId"`
}

func (q *Queries) UpdateActionEvent(ctx context.Context, arg UpdateActionEventParams) error {
	_, err := q.db.Exec(ctx, updateActionEvent,
		arg.ID,
		arg.Action,
		arg.CreatedAt,
		arg.Actor,
		arg.Assignee,
		arg.Assigner,
		arg.DocumentId,
		arg.CollectionId,
	)
	return err
}
