// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: colletion_tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTagToCollection = `-- name: AddTagToCollection :exec
INSERT INTO "Collection_Tag" (
  "folder_id",
  "tag_id"
) VALUES (
  $1, $2
)
`

type AddTagToCollectionParams struct {
	FolderID pgtype.Text `json:"folder_id"`
	TagID    pgtype.Text `json:"tag_id"`
}

func (q *Queries) AddTagToCollection(ctx context.Context, arg AddTagToCollectionParams) error {
	_, err := q.db.Exec(ctx, addTagToCollection, arg.FolderID, arg.TagID)
	return err
}

const getTagsByCollectionID = `-- name: GetTagsByCollectionID :many
SELECT "tag_id" FROM "Collection_Tag"
WHERE "folder_id" = $1
`

func (q *Queries) GetTagsByCollectionID(ctx context.Context, folderID pgtype.Text) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getTagsByCollectionID, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var tag_id pgtype.Text
		if err := rows.Scan(&tag_id); err != nil {
			return nil, err
		}
		items = append(items, tag_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromCollection = `-- name: RemoveTagFromCollection :exec
DELETE FROM "Collection_Tag"
WHERE "folder_id" = $1 AND "tag_id" = $2
`

type RemoveTagFromCollectionParams struct {
	FolderID pgtype.Text `json:"folder_id"`
	TagID    pgtype.Text `json:"tag_id"`
}

func (q *Queries) RemoveTagFromCollection(ctx context.Context, arg RemoveTagFromCollectionParams) error {
	_, err := q.db.Exec(ctx, removeTagFromCollection, arg.FolderID, arg.TagID)
	return err
}
