// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "User" (
  "email",
  "username",
  "password",
  "firstName",
  "lastName",
  "isAdmin",
  "isActive",
  "isViewer",
  "language",
  "createdAt",
  "updatedAt"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, email, username, password, "firstName", "lastName", "isAdmin", "isActive", "isViewer", language, "lastActiveAt", roles, "createdAt", "updatedAt"
`

type CreateUserParams struct {
	Email     pgtype.Text      `json:"email"`
	Username  pgtype.Text      `json:"username"`
	Password  pgtype.Text      `json:"password"`
	FirstName pgtype.Text      `json:"firstName"`
	LastName  pgtype.Text      `json:"lastName"`
	IsAdmin   pgtype.Bool      `json:"isAdmin"`
	IsActive  pgtype.Bool      `json:"isActive"`
	IsViewer  pgtype.Bool      `json:"isViewer"`
	Language  pgtype.Text      `json:"language"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.IsAdmin,
		arg.IsActive,
		arg.IsViewer,
		arg.Language,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsAdmin,
		&i.IsActive,
		&i.IsViewer,
		&i.Language,
		&i.LastActiveAt,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "User"
WHERE "id" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password, "firstName", "lastName", "isAdmin", "isActive", "isViewer", language, "lastActiveAt", roles, "createdAt", "updatedAt" FROM "User"
WHERE "email" = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsAdmin,
		&i.IsActive,
		&i.IsViewer,
		&i.Language,
		&i.LastActiveAt,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, password, "firstName", "lastName", "isAdmin", "isActive", "isViewer", language, "lastActiveAt", roles, "createdAt", "updatedAt" FROM "User"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsAdmin,
		&i.IsActive,
		&i.IsViewer,
		&i.Language,
		&i.LastActiveAt,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, password, "firstName", "lastName", "isAdmin", "isActive", "isViewer", language, "lastActiveAt", roles, "createdAt", "updatedAt" FROM "User"
WHERE "username" = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsAdmin,
		&i.IsActive,
		&i.IsViewer,
		&i.Language,
		&i.LastActiveAt,
		&i.Roles,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, username, password, "firstName", "lastName", "isAdmin", "isActive", "isViewer", language, "lastActiveAt", roles, "createdAt", "updatedAt" FROM "User"
ORDER BY "createdAt"
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.FirstName,
			&i.LastName,
			&i.IsAdmin,
			&i.IsActive,
			&i.IsViewer,
			&i.Language,
			&i.LastActiveAt,
			&i.Roles,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "User"
SET
  "email" = $2,
  "username" = $3,
  "password" = $4,
  "firstName" = $5,
  "lastName" = $6,
  "isAdmin" = $7,
  "isActive" = $8,
  "isViewer" = $9,
  "language" = $10,
  "updatedAt" = $11
WHERE "id" = $1
`

type UpdateUserParams struct {
	ID        string           `json:"id"`
	Email     pgtype.Text      `json:"email"`
	Username  pgtype.Text      `json:"username"`
	Password  pgtype.Text      `json:"password"`
	FirstName pgtype.Text      `json:"firstName"`
	LastName  pgtype.Text      `json:"lastName"`
	IsAdmin   pgtype.Bool      `json:"isAdmin"`
	IsActive  pgtype.Bool      `json:"isActive"`
	IsViewer  pgtype.Bool      `json:"isViewer"`
	Language  pgtype.Text      `json:"language"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.IsAdmin,
		arg.IsActive,
		arg.IsViewer,
		arg.Language,
		arg.UpdatedAt,
	)
	return err
}
