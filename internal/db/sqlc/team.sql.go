// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: team.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO "Team" (
  "name",
  "avatarUrl",
  "subDomain",
  "theme",
  "canComment",
  "canShare",
  "inviteRequired",
  "defaultUserRole",
  "createdAt",
  "updatedAt",
  "url"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, name, "avatarUrl", "subDomain", theme, "canComment", "canShare", "inviteRequired", "defaultUserRole", "createdAt", "updatedAt", url
`

type CreateTeamParams struct {
	Name            pgtype.Text      `json:"name"`
	AvatarUrl       pgtype.Text      `json:"avatarUrl"`
	SubDomain       pgtype.Text      `json:"subDomain"`
	Theme           pgtype.Text      `json:"theme"`
	CanComment      pgtype.Bool      `json:"canComment"`
	CanShare        pgtype.Bool      `json:"canShare"`
	InviteRequired  pgtype.Bool      `json:"inviteRequired"`
	DefaultUserRole pgtype.Text      `json:"defaultUserRole"`
	CreatedAt       pgtype.Timestamp `json:"createdAt"`
	UpdatedAt       pgtype.Timestamp `json:"updatedAt"`
	Url             pgtype.Text      `json:"url"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam,
		arg.Name,
		arg.AvatarUrl,
		arg.SubDomain,
		arg.Theme,
		arg.CanComment,
		arg.CanShare,
		arg.InviteRequired,
		arg.DefaultUserRole,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Url,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.SubDomain,
		&i.Theme,
		&i.CanComment,
		&i.CanShare,
		&i.InviteRequired,
		&i.DefaultUserRole,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM "Team"
WHERE "id" = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeam, id)
	return err
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, name, "avatarUrl", "subDomain", theme, "canComment", "canShare", "inviteRequired", "defaultUserRole", "createdAt", "updatedAt", url FROM "Team"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetTeamByID(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRow(ctx, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.SubDomain,
		&i.Theme,
		&i.CanComment,
		&i.CanShare,
		&i.InviteRequired,
		&i.DefaultUserRole,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, name, "avatarUrl", "subDomain", theme, "canComment", "canShare", "inviteRequired", "defaultUserRole", "createdAt", "updatedAt", url FROM "Team"
ORDER BY "createdAt"
LIMIT $1
OFFSET $2
`

type ListTeamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTeams(ctx context.Context, arg ListTeamsParams) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarUrl,
			&i.SubDomain,
			&i.Theme,
			&i.CanComment,
			&i.CanShare,
			&i.InviteRequired,
			&i.DefaultUserRole,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE "Team"
SET
  "name" = $2,
  "avatarUrl" = $3,
  "subDomain" = $4,
  "theme" = $5,
  "canComment" = $6,
  "canShare" = $7,
  "inviteRequired" = $8,
  "defaultUserRole" = $9,
  "updatedAt" = $10,
  "url" = $11
WHERE "id" = $1
`

type UpdateTeamParams struct {
	ID              uuid.UUID        `json:"id"`
	Name            pgtype.Text      `json:"name"`
	AvatarUrl       pgtype.Text      `json:"avatarUrl"`
	SubDomain       pgtype.Text      `json:"subDomain"`
	Theme           pgtype.Text      `json:"theme"`
	CanComment      pgtype.Bool      `json:"canComment"`
	CanShare        pgtype.Bool      `json:"canShare"`
	InviteRequired  pgtype.Bool      `json:"inviteRequired"`
	DefaultUserRole pgtype.Text      `json:"defaultUserRole"`
	UpdatedAt       pgtype.Timestamp `json:"updatedAt"`
	Url             pgtype.Text      `json:"url"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.Exec(ctx, updateTeam,
		arg.ID,
		arg.Name,
		arg.AvatarUrl,
		arg.SubDomain,
		arg.Theme,
		arg.CanComment,
		arg.CanShare,
		arg.InviteRequired,
		arg.DefaultUserRole,
		arg.UpdatedAt,
		arg.Url,
	)
	return err
}
